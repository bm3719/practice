* Macros in Clojure

A non-comprehensive look:
- What are macros
- When to use macros
- When not to use macros
- Macro tips


* What are macros?

Macros are an form of metaprogramming.

Metaprogramming: Treating programs as data.  Generating programs, reading in
programs, transformation of program or code that represents programs.

3 main approaches:
- Eval-ing generated strings that represent code (which you can also do in
  Clojure), e.g.:
  #+begin_src clojure
  (eval (read-string "(+ 1 2)"))
  #+end_src
- Exposure of runtime.  Spring, Hibernate, and others do this with the JVM.
- Metaprogramming systems, provided by the language.

---

Approaches:
- JavaScript does this.  Functions emit text that happens to be valid code.
- bytecode manipulation, heavy-weight frameworks for this stuff, reflection.
- These include macro systems.  C/C++ and Lisp for example.
  - There's also Template Haskell, which is a language extension. Template
    Haskell edits the AST, has ADTs representing it, and functions defined over
    those types.
  - Python, Ruby, and others have metaclasses, allowing classes to be
    first-class citizens.  Metaclasses can construct classes.

* Clojure macros

Clojure provides a metaprogramming system within the language.

Homoiconicity: Code <--> data.  This makes manipulating programs easy.

Macroexpansion: A step in the evaluation workflow.

---

- Contrast other language approaches, where very non-native interfaces are
  necessary.  Here, everything is an sexp.
- The Clojure evaluation pipeline:
  - Code read as data by reader, which also processes reader macros
  - Macroexpansion
  - Resulting code is then compiled and evaluated.


* Macro basics

- =defmacro=
- ' =quote=
- ` (syntax-quote)
- ~ =unquote=
- ~@ =unquote-splicing=
- var# =gensym=
- =macroexpand=, =macroexpand-1=

--

- quote returns an un-evaled form.
- syntax-quote namespace-qualifies. =`(a b c)=
- =(def c 1)=
  =`(a b ~c)=
- =(def lst '(1 2 3))=
  =`(a b ~@lst)=
- =`(let [var# 1])=
- Show definition of =when= then macroexpand a =when= statement.
- =macroexpand= recursively calls =macroexpand-1=.

* When to use macros

- Modifying evaluation order.
- Syntax abstraction (with caveats).
- Presenting a clean abstraction.
- DSLs or other extra-linguistic extension.

---

- Example:
  #+begin_src clojure
  (defmacro infix [form]
    `(~(second form) ~(first form) ~(last form)))
  #+end_src
- Common example is resource management, e.g., managing a stream.
- Compojure, API design
- DSL design

* When not to use macros

- Any time functions will do the job without adding needless complexity.
- "Data > Functions > Macros."  In other words, almost never use macros.
- Most cases of syntax abstraction.
- When the macros will infect code using it.
- Anaphora (with caveats).
- When optimizing for simplicity.

---

-
- Macros require an extra layer of reasoning.  You have to think about your
  code at two levels.
- vs. CL
- Anaphoric macros are called with symbols that are context-defined, hidden
  inside the macro definition.
  - These don't nest in Clojure.  Only the top-level binding is active.
  - Nested =awhen= with =it=.
- Errors messages, line number references, debugging.

* Some macro tips

Combine your ` ' @ ~ symbols.

Macro hygiene: =gensyms=,

---

- make-spinner example.
  #+begin_src clojure
  (def stuff "plastic")
  ((defspinner (str stuff " tentacle")) "metal")

  (defmacro defspinner [arm]
    (let [stuff (gensym)]
      `(fn [~stuff] {:arms [~arm ~arm ~arm]
                     :center ~stuff})))
  #+end_src
- Finally, change the =gensym= to =stuff#=.  Remove =~=.

* Resources

Go forth and read these:
- Clojure for the Brave and True chapters:
 - Clojure Alchemy: Reading, Evaluation, and Macros
 - Writing Macros
- The Joy of Clojure, Chapter 8.
- Mastering Clojure Macros
